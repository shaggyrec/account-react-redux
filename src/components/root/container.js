import React from 'react';
import { connect } from 'react-redux';
import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken } from '../user/actions';
import App from './component';
import { withRouter } from 'react-router'
import axios from 'axios'
import Cookies from 'js-cookie'


function mapStateToProps(state) {
    return {
        authenticatedUser: state.user.status === 'authenticated' ? state.user.user : null,
        user: state.user
    };
}

const mapDispatchToProps = (dispatch) => {
    return {
        loadUserFromToken: () => {
            let token = localStorage.getItem('jwtToken');
            if(!token || token === '') {//if there is no token, dont bother
                return;
            }

            //fetch user from token (if server deems it's valid token)
            dispatch(meFromToken(token))
                .then((response) => {
                    if (!response.error) {
                        //reset token (possibly new token that was regenerated by the server)
                        localStorage.setItem('jwtToken', response.payload.data.token);
                        dispatch(meFromTokenSuccess(response.payload))

                        //
                        //const req = axios.post('http://94.130.174.2/bitrix/components/bitrix/pull.request/ajax.php?GET_CHANNEL&V=14&CR=0&CODE=WS-1006-1-02',
                        //     {
                        //         PULL_GET_CHANNEL:'Y',
                        //         SITE_ID:'s1',
                        //         MOBILE:'N',
                        //         CACHE:'Y',
                        //         PULL_AJAX_CALL:'Y',
                        //         sessid: Cookies.get('PHPSESSID')
                        //     })
                        //     .then(res => {
                        //     console.log(res.BITRIX_SESSID)
                        // }).catch( error => {
                        //     console.log(error)
                        // })
                        // const timestampt = +(new Date())
                        // const CHANNEL_ID = '47ece22c2ccccaae72e0962afe6d0c2f.36118dc032334bacc10dd6a0ada076b80eca115d/cbe56891c14f347085b7ca799ea8cff0.7303581933759d9818dd6735b96106d0ee030bdd'
                        // const socket = new WebSocket('ws://94.130.174.2/bitrix/subws/?CHANNEL_ID=' + CHANNEL_ID + '&tag=1&rnd=' + timestampt)
                        // socket.onopen = e => {
                        //     console.log(e)
                        //     //socket.send(1111)
                        // }
                        // socket.onclose = e => {
                        //     if (e.wasClean) {
                        //         console.log('Соединение закрыто чисто');
                        //     } else {
                        //         console.log('Обрыв соединения');
                        //     }
                        //     console.log('Код: ' + e.code + ' причина: ' + e.reason);
                        // }
                        // socket.onerror = e => {
                        //     console.log(e)
                        // }
                        // socket.onmessage = e => {
                        //     const data = JSON.parse(e.data.replace(/#!NGINXNMS!#|#!NGINXNME!#/g,'').replace(/'/g,'"'))
                        //     console.log(data.text.MESSAGE[0].params.data)
                        //
                        // }
                    } else {
                        localStorage.removeItem('jwtToken');//remove token from storage
                        dispatch(meFromTokenFailure(response.payload));
                    }
                });
        },
        resetMe: () => {
            localStorage.removeItem('jwtToken'); //remove token from storage
            //dispatch(resetToken());
        }
    }
}


export default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));
